name: Packaging

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Target name"
        default: "x86_64-unknown-linux-gnu"
        required: false
        type: choice
        options:
          - "x86_64-unknown-linux-gnu"
          - "armv7-unknown-linux-gnueabihf"
  workflow_call:
    inputs:
      target:
        description: "Target name"
        default: "x86_64-unknown-linux-gnu"
        required: false
        type: string

jobs:
  package:
    name: Package
    env:
      CARGO_DEB_VER: 1.36.0
      CARGO_GENERATE_RPM_VER: 0.6.0
    strategy:
      matrix:
        image:
          - "ubuntu:20.04"
          - "fedora:34"
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
    steps:
      - name: Set vars
        id: setvars
        run: |
          IMAGE="${MATRIX_IMAGE}"
          echo "OS_NAME=${IMAGE%:*}" >> $GITHUB_ENV
        env:
          MATRIX_IMAGE: ${{ matrix.image }}

      - name: Install libs
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          case ${OS_NAME} in
            ubuntu)
              apt-get update
              apt-get install -y curl build-essential libssl-dev pkg-config lintian
              ;;
            fedora)
              dnf install -y gcc cmake openssl-devel rpmlint
              ;;
          esac

      - name: Setup Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --profile minimal -t ${{ inputs.target }} -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Cargo Deb if available
        id: cache-cargo-deb
        if: env.OS_NAME == 'ubuntu'
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin/cargo-deb
          key: cargo-deb-${{ inputs.target }}-${{ env.CARGO_DEB_VER }}

      - name: Cache Cargo Generate RPM if available
        id: cache-cargo-generate-rpm
        if: env.OS_NAME == 'fedora'
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin/cargo-generate-rpm
          key: cargo-generate-rpm-${{ inputs.target }}-${{ env.CARGO_GENERATE_RPM_VER }}

      - name: Install Cargo Deb if needed
        if: env.OS_NAME == 'ubuntu' && steps.cache-cargo-deb.outputs.cache-hit != 'true'
        run: cargo install cargo-deb --version ${CARGO_DEB_VER} --locked --target=${{ inputs.target }}

      - name: Install Cargo Generate RPM if needed
        if: env.OS_NAME == 'fedora' && steps.cache-cargo-generate-rpm.outputs.cache-hit != 'true'
        run: cargo install cargo-generate-rpm --version ${CARGO_GENERATE_RPM_VER} --locked --target=${{ inputs.target }}

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Create package
        run: |
          case ${OS_NAME} in
            ubuntu)
              cargo deb --target ${{ inputs.target }}
              ;;
            fedora)
              cargo build --release --target ${{ inputs.target }}
              strip -s target/release/alerter
              cargo generate-rpm
              ;;
          esac

      - name: Verify package
        run: |
          # do not use exis codes while errors occured
          case ${OS_NAME} in
            ubuntu)
              lintian -v target/debian/*.deb || true
              ;;
            fedora)
              rpmlint target/generate-rpm/*.rpm || true
              ;;
          esac

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: alerter-${{ env.OS_NAME }}
          path: |
            target/debian/*.deb
            target/generate-rpm/*.rpm
