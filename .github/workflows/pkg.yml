name: Packaging

on:
  workflow_dispatch:
  workflow_call:
  push:
    paths:
      - ".github/workflows/pkg.yml"
    branches:
      - master
  pull_request:
    paths:
      - ".github/workflows/pkg.yml"

jobs:
  deb:
    name: Deb package
    env:
      CARGO_DEB_VER: 1.38.0
    strategy:
      matrix:
        target:
          - "x86_64-unknown-linux-gnu"
          - "armv7-unknown-linux-gnueabihf"
    runs-on: ubuntu-20.04
    steps:
      - name: Install libs on x86-64
        if: startsWith(matrix.target, 'arm') != true
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config libssl-dev lintian

      - name: Install libs on ARM
        if: startsWith(matrix.target, 'arm')
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf lintian

      - name: Cache OpenSSL on ARM
        if: startsWith(matrix.target, 'arm')
        id: cache-openssl-arm
        uses: actions/cache@v3
        with:
          path: /tmp/openssl-1.1.1m/
          key: openssl-1.1.1m-${{ matrix.target }}

      - name: Install OpenSSL on ARM
        if: startsWith(matrix.target, 'arm') && steps.cache-openssl-arm.outputs.cache-hit != 'true'
        run: |
          cd /tmp
          wget https://www.openssl.org/source/openssl-1.1.1m.tar.gz
          echo "f89199be8b23ca45fc7cb9f1d8d3ee67312318286ad030f5316aca6462db6c96  openssl-1.1.1m.tar.gz" | sha256sum -c
          tar xzf openssl-1.1.1m.tar.gz
          export MACHINE=armv7
          export ARCH=arm
          export CC=arm-linux-gnueabihf-gcc
          cd openssl-1.1.1m && ./config shared && make && cd -

      - name: Set OpenSSL env vars on ARM
        if: startsWith(matrix.target, 'arm')
        run: |
          echo "OPENSSL_LIB_DIR=/tmp/openssl-1.1.1m/" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/tmp/openssl-1.1.1m/include" >> $GITHUB_ENV

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Install Cargo Deb
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-deb --vers=${{ env.CARGO_DEB_VER }} --locked

      - name: Create debian changelog
        run: |
          python scripts/kac2debian_changelog.py --input CHANGELOG.md --output pkg/doc/changelog --package-name alerter --author ultram4rine --email ultramarine730@gmail.com

      - name: Generate man page
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --bin=mangen

      - name: Create package
        uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --target=${{ matrix.target }}

      - name: Verify package
        run: |
          # do not use exit codes while errors occured
          lintian -v target/${{ matrix.target }}/debian/*.deb || true

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: alerter-deb
          path: |
            target/${{ matrix.target }}/debian/*.deb

  rpm:
    name: RPM package
    env:
      CARGO_GENERATE_RPM_VER: 0.6.0
    strategy:
      matrix:
        image:
          - "centos:7"
          - "fedora:34"
    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.image }}
    steps:
      - name: Install libs on CentOS
        if: startsWith(matrix.image, 'centos')
        run: |
          yum update -y && yum install -y epel-release && yum install -y gcc make cmake3 gcc-c++ openssl-devel gzip rpmlint
          ln -s /usr/bin/cmake3 /usr/bin/cmake

      - name: Install libs on Fedora
        if: startsWith(matrix.image, 'fedora')
        run: dnf install --refresh -y gcc cmake gcc-c++ openssl-devel gzip rpmlint

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore cache
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.image }}

      - name: Delete previous RPM
        run: rm -f target/generate-rpm/*.rpm

      - name: Install Cargo Generate RPM
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-generate-rpm --vers=${{ env.CARGO_GENERATE_RPM_VER }} --locked

      - name: Generate man page
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --bin=mangen

      - name: Compress man page
        run: |
          gzip -c pkg/doc/alerter.1 > pkg/doc/alerter.1.gz

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Remove all symbol and relocation information
        run: strip -s target/release/alerter

      - name: Set compress type for CentOS 7
        if: matrix.image == 'centos:7'
        run: echo "CENTOS_BUILD_FLAGS=--payload-compress=gzip" >> $GITHUB_ENV

      - name: Add dist to release
        run: dist=$(rpm --eval %{?dist}); sed -i -e 's/release = "\(.*\)"/release = "\1'$dist'"/g' Cargo.toml

      - name: Create package
        uses: actions-rs/cargo@v1
        with:
          command: generate-rpm
          args: ${{ env.CENTOS_BUILD_FLAGS }}

      - name: Verify package
        run: |
          # do not use exit codes while errors occured
          rpmlint target/generate-rpm/alerter-*.rpm || true

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: alerter-rpm
          path: |
            target/generate-rpm/alerter-*.rpm
