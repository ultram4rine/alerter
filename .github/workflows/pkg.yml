name: Packaging

on: [workflow_dispatch, workflow_call]

jobs:
  deb:
    name: Deb package
    env:
      CARGO_DEB_VER: 1.36.0
    strategy:
      matrix:
        image:
          - "ubuntu:20.04"
        target:
          - "x86_64-unknown-linux-gnu"
          - "armv7-unknown-linux-gnueabihf"
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
    steps:
      - name: Install libs
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt-get update
          apt-get install -y curl build-essential libssl-dev pkg-config lintian

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Install Cargo Deb
        uses: actions-rs/cargo@v1
        env:
          CARGO_TARGET: ${{ matrix.target }}
        with:
          command: install
          args: cargo-deb --vers=${{ env.CARGO_DEB_VER }} --locked

      - name: Create package
        uses: actions-rs/cargo@v1
        env:
          CARGO_TARGET: ${{ matrix.target }}
        with:
          command: deb
          args: --target ${{ env.CARGO_TARGET }}
          use-cross: true

      - name: Verify package
        run: |
          # do not use exis codes while errors occured
          lintian -v target/${{ matrix.target }}/debian/*.deb || true

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: alerter-deb-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/debian/*.deb

  rpm:
    name: RPM package
    env:
      CARGO_GENERATE_RPM_VER: 0.6.0
    strategy:
      matrix:
        image:
          - "fedora:34"
        target:
          - "x86_64-unknown-linux-gnu"
          - "armv7-unknown-linux-gnueabihf"
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
    steps:
      - name: Install libs
        run: dnf install --refresh -y gcc cmake openssl-devel rpmlint

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Install Cargo Generate RPM
        uses: actions-rs/cargo@v1
        env:
          CARGO_TARGET: ${{ matrix.target }}
        with:
          command: install
          args: cargo-generate-rpm --vers=${{ env.CARGO_GENERATE_RPM_VER }} --locked

      - name: Build binary
        uses: actions-rs/cargo@v1
        env:
          CARGO_TARGET: ${{ matrix.target }}
        with:
          command: build
          args: --release --target ${{ env.CARGO_TARGET }}
          use-cross: true

      - name: Remove all symbol and relocation information
        run: strip -s target/${{ matrix.target }}/release/alerter

      - name: Create package
        uses: actions-rs/cargo@v1
        env:
          CARGO_TARGET: ${{ matrix.target }}
        with:
          command: generate-rpm
          args: --target ${{ env.CARGO_TARGET }}
          use-cross: true

      - name: Verify package
        run: |
          # do not use exis codes while errors occured
          rpmlint target/${{ matrix.target }}/generate-rpm/*.rpm || true

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: alerter-rpm-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/generate-rpm/*.rpm
