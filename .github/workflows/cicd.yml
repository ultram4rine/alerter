name: CI/CD

on:
  push:
    paths-ignore:
      - ".github/workflows/pkg.yml"
      - ".github/workflows/update-packagers.yml"
      - ".github/dependabot.yml"
      - "templates"
      - "LICENSE"
      - "*.md"
      - "test.sh"
  pull_request:
    paths-ignore:
      - ".github/workflows/pkg.yml"
      - ".github/workflows/update-packagers.yml"
      - ".github/dependabot.yml"
      - "templates"
      - "LICENSE"
      - "*.md"
      - "test.sh"

jobs:
  test-n-build:
    name: Test and build
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Archive
        run: |
          mv target/release/alerter .
          tar -czvf alerter-$(cargo read-manifest | sed 's/.*"version":"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/').tar.gz alerter templates

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: alerter-archive
          path: alerter-*.tar.gz

  package:
    name: Package
    needs: test-n-build
    uses: ./.github/workflows/pkg.yml

  docker:
    name: Docker image
    needs: test-n-build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set docker image tag
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "DOCKER_TAG=:$(cargo read-manifest | sed 's/.*"version":"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/')" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ultram4rine/alerter:latest
            ghcr.io/ultram4rine/alerter:latest
            ultram4rine/alerter${{ env.DOCKER_TAG }}
            ghcr.io/ultram4rine/alerter${{ env.DOCKER_TAG }}

  release:
    name: Release
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test-n-build
      - package
      - docker
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create release body file
        run: awk -v ver=v$(cargo read-manifest | sed 's/.*"version":"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/') '/^##/ { if (p) { exit }; if ($2 == ver) { p=1; next } } p && NF' CHANGELOG.md > changes.txt

      - name: Download archive
        uses: actions/download-artifact@v3
        with:
          name: alerter-archive
          path: archive

      - name: Download Deb package
        uses: actions/download-artifact@v3
        with:
          name: alerter-deb
          path: packages

      - name: Download RPM package
        uses: actions/download-artifact@v3
        with:
          name: alerter-rpm
          path: packages

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: changes.txt
          files: |
            archive/alerter-*.tar.gz
            packages/**/*

  publish_crate:
    name: Publish crate
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test-n-build
      - package
      - docker
    steps:
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Login to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
